using Microsoft.Data.SqlClient;
using System.Data;

namespace MedicalAppointmentSystem.Api.Data.Context
{
    public class DatabaseUtility
    {
        private readonly IConfiguration _configuration;

        public DatabaseUtility(IConfiguration configuration)
        {
            _configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
        }

        private string ConnectionString => _configuration.GetConnectionString("DefaultConnection")
            ?? throw new InvalidOperationException("DefaultConnection connection string not found in configuration");

        /// <summary>
        /// Executes a stored procedure asynchronously and returns results deserialized to the specified type
        /// </summary>
        /// <typeparam name="T">Type to deserialize the results to</typeparam>
        /// <param name="storedProcedure">Name of the stored procedure</param>
        /// <param name="parameters">Optional SqlParameters for the stored procedure</param>
        /// <returns>List of deserialized results of type T</returns>
        public async Task<List<T>> ExecuteStoredProcedureAsync<T>(
            string storedProcedure,
            SqlParameter[] parameters = null) where T : class, new()
        {
            using (var connection = new SqlConnection(ConnectionString))
            {
                await connection.OpenAsync();

                using (var command = new SqlCommand(storedProcedure, connection))
                {
                    command.CommandType = CommandType.StoredProcedure;

                    if (parameters != null && parameters.Any())
                    {
                        command.Parameters.AddRange(parameters);
                    }

                    try
                    {
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            var results = new List<T>();

                            if (!reader.HasRows)
                            {
                                return results;
                            }

                            var dt = new DataTable();
                            dt.Load(reader);

                            foreach (DataRow row in dt.Rows)
                            {
                                results.Add(ConvertDataRowToObject<T>(row));
                            }

                            return results;
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error executing stored procedure {storedProcedure}: {ex.Message}");
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// Executes a stored procedure asynchronously and returns a single result deserialized to the specified type
        /// </summary>
        /// <typeparam name="T">Type to deserialize the result to</typeparam>
        /// <param name="storedProcedure">Name of the stored procedure</param>
        /// <param name="parameters">Optional SqlParameters for the stored procedure</param>
        /// <returns>Single deserialized result of type T</returns>
        public async Task<T> ExecuteStoredProcedureSingleAsync<T>(
            string storedProcedure,
            SqlParameter[] parameters = null) where T : class, new()
        {
            var results = await ExecuteStoredProcedureAsync<T>(storedProcedure, parameters);
            return results?.FirstOrDefault() ?? new T();
        }

        /// <summary>
        /// Executes an insert stored procedure asynchronously and returns the generated identity value
        /// </summary>
        /// <param name="storedProcedure">Name of the stored procedure</param>
        /// <param name="parameters">SqlParameters for the stored procedure</param>
        /// <returns>The identity value generated by the insert operation</returns>
        public async Task<int> ExecuteQueryAsync(
            string storedProcedure,
            SqlParameter[] parameters)
        {
            using (var connection = new SqlConnection(ConnectionString))
            {
                await connection.OpenAsync();

                using (var command = new SqlCommand(storedProcedure, connection))
                {
                    command.CommandType = CommandType.StoredProcedure;

                    // Add other parameters
                    if (parameters != null)
                    {
                        command.Parameters.AddRange(parameters);
                    }

                    try
                    {
                        // Execute the stored procedure
                        await command.ExecuteNonQueryAsync();

                        var returnId = command.Parameters["@IdentityValue"].Value == DBNull.Value ? 0 : Convert.ToInt32(command.Parameters["@IdentityValue"].Value);

                        return returnId;
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error executing stored procedure {storedProcedure}: {ex.Message}");
                        throw;
                    }
                }
            }
        }

        public async Task<DataSet> ExecuteStoredProcedureMultipleResultsAsync(string storedProcedure, SqlParameter[] parameters = null)
        {
            using (var connection = new SqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                using (var command = new SqlCommand(storedProcedure, connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    if (parameters != null && parameters.Any())
                    {
                        command.Parameters.AddRange(parameters);
                    }

                    try
                    {
                        using (var adapter = new SqlDataAdapter(command))
                        {
                            var dataSet = new DataSet();
                            adapter.Fill(dataSet);
                            return dataSet;
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error executing stored procedure {storedProcedure}: {ex.Message}");
                        throw;
                    }
                }
            }
        }

        // Helper method to convert DataTable to List<T>
        public List<T> ConvertDataTableToList<T>(DataTable dataTable) where T : class, new()
        {
            var results = new List<T>();
            foreach (DataRow row in dataTable.Rows)
            {
                results.Add(ConvertDataRowToObject<T>(row));
            }
            return results;
        }

        /// <summary>
        /// Converts a DataRow to an object of type T
        /// </summary>
        private T ConvertDataRowToObject<T>(DataRow row) where T : class, new()
        {
            T item = new T();
            var properties = typeof(T).GetProperties();

            foreach (var property in properties)
            {
                if (row.Table.Columns.Contains(property.Name))
                {
                    var value = row[property.Name];
                    if (value != DBNull.Value)
                    {
                        try
                        {
                            // Handle nullable types
                            if (Nullable.GetUnderlyingType(property.PropertyType) != null)
                            {
                                property.SetValue(item, Convert.ChangeType(value,
                                    Nullable.GetUnderlyingType(property.PropertyType)));
                            }
                            else
                            {
                                property.SetValue(item, Convert.ChangeType(value, property.PropertyType));
                            }
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Error converting property {property.Name}: {ex.Message}");
                        }
                    }
                }
            }

            return item;
        }
    }
}
