using Microsoft.Data.SqlClient;
using System.Data;

namespace MedicalAppointmentSystem.Api.Data.Context
{
    public static class DatabaseUtility
    {
        private static IConfiguration _configuration;

        public static void Init(IConfiguration configuration)
        {
            _configuration = configuration;
        }

        private static string ConnectionString => _configuration?.GetConnectionString("DefaultConnection") 
            ?? throw new InvalidOperationException("DatabaseUtility not initialized or connection string not found");

        /// <summary>
        /// Executes a stored procedure and returns results deserialized to the specified type
        /// </summary>
        /// <typeparam name="T">Type to deserialize the results to</typeparam>
        /// <param name="storedProcedure">Name of the stored procedure</param>
        /// <param name="parameters">Optional SqlParameters for the stored procedure</param>
        /// <returns>List of deserialized results of type T</returns>
        public static List<T> ExecuteStoredProcedure<T>(
            string storedProcedure,
            SqlParameter[] parameters = null) where T : class, new()
        {
            using (var connection = new SqlConnection(ConnectionString))
            {
                connection.Open();

                using (var command = new SqlCommand(storedProcedure, connection))
                {
                    command.CommandType = CommandType.StoredProcedure;

                    if (parameters != null && parameters.Any())
                    {
                        command.Parameters.AddRange(parameters);
                    }

                    try
                    {
                        using (var reader = command.ExecuteReader())
                        {
                            var results = new List<T>();

                            if (!reader.HasRows)
                            {
                                return results;
                            }

                            var dt = new DataTable();
                            dt.Load(reader);

                            foreach (DataRow row in dt.Rows)
                            {
                                results.Add(ConvertDataRowToObject<T>(row));
                            }

                            return results;
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error executing stored procedure {storedProcedure}: {ex.Message}");
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// Executes a stored procedure and returns a single result deserialized to the specified type
        /// </summary>
        /// <typeparam name="T">Type to deserialize the result to</typeparam>
        /// <param name="storedProcedure">Name of the stored procedure</param>
        /// <param name="parameters">Optional SqlParameters for the stored procedure</param>
        /// <returns>Single deserialized result of type T</returns>
        public static T ExecuteStoredProcedureSingle<T>(
            string storedProcedure,
            SqlParameter[] parameters = null) where T : class, new()
        {
            var results = ExecuteStoredProcedure<T>(storedProcedure, parameters);
            return results.FirstOrDefault();
        }

        /// <summary>
        /// Executes an insert stored procedure and returns the generated identity value
        /// </summary>
        /// <param name="storedProcedure">Name of the stored procedure</param>
        /// <param name="parameters">SqlParameters for the stored procedure</param>
        /// <returns>The identity value generated by the insert operation</returns>
        public static int ExecuteQuery(
            string storedProcedure,
            SqlParameter[] parameters)
        {
            using (var connection = new SqlConnection(ConnectionString))
            {
                connection.Open();

                using (var command = new SqlCommand(storedProcedure, connection))
                {
                    command.CommandType = CommandType.StoredProcedure;

                    // Add other parameters
                    if (parameters != null)
                    {
                        command.Parameters.AddRange(parameters);
                    }

                    try
                    {
                        // Execute the stored procedure
                        command.ExecuteNonQuery();

                        var returnId = command.Parameters["@IdentityValue"].Value == DBNull.Value ? 0 : Convert.ToInt32(command.Parameters["@IdentityValue"].Value);
                        return returnId;
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error executing stored procedure {storedProcedure}: {ex.Message}");
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// Converts a DataRow to an object of type T
        /// </summary>
        private static T ConvertDataRowToObject<T>(DataRow row) where T : class, new()
        {
            T item = new T();
            var properties = typeof(T).GetProperties();

            foreach (var property in properties)
            {
                if (row.Table.Columns.Contains(property.Name))
                {
                    var value = row[property.Name];
                    if (value != DBNull.Value)
                    {
                        try
                        {
                            // Handle nullable types
                            if (Nullable.GetUnderlyingType(property.PropertyType) != null)
                            {
                                property.SetValue(item, Convert.ChangeType(value,
                                    Nullable.GetUnderlyingType(property.PropertyType)));
                            }
                            else
                            {
                                property.SetValue(item, Convert.ChangeType(value, property.PropertyType));
                            }
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Error converting property {property.Name}: {ex.Message}");
                        }
                    }
                }
            }

            return item;
        }
    }
}
